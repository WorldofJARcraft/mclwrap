plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
}

group 'org.cryptimeleon'
archivesBaseName = project.name
boolean isRelease = project.hasProperty("release")
version = '1.0.0'  + (isRelease ? "" : "-SNAPSHOT")

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

def mathVersionNoSuffix = '1.0.0'

dependencies {

    def mathVersion = mathVersionNoSuffix + (isRelease ? "" : "-SNAPSHOT")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api group: 'org.cryptimeleon', name: 'math', version: mathVersion
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    // For tests
    testImplementation(group: 'org.cryptimeleon', name: 'math', version: mathVersion) {
            capabilities {
                requireCapability("org.cryptimeleon:math-tests")
            }
    }
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
}

test {
    useJUnitPlatform()
    maxParallelForks 4
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

task javadocLink(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    // link to math and craco javadocs
    options {
        links "https://javadoc.io/doc/org.cryptimeleon/math/" + mathVersionNoSuffix
    }
}

java {
    registerFeature("tests") {
        usingSourceSet(sourceSets.test)
    }
}
